{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TaskMQ","text":"<p>TaskMQ is a modern, developer-friendly Python task queue and job processing framework. It helps you run background jobs, automate workflows, and build scalable systems with ease.</p> <ul> <li>\ud83d\ude80 Simple CLI and API for adding and running jobs</li> <li>\ud83e\udde9 Register custom Python handlers for any task</li> <li>\ud83d\udd10 Secure, observable, and production-ready</li> <li>\ud83d\udce6 Pluggable storage backends (SQLite, Redis stub)</li> <li>\ud83e\uddea Full test suite and CI</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Quickstart</li> <li>Usage Guide</li> <li>Writing Handlers</li> <li>API Reference</li> <li>Contributing</li> </ul> <p>TaskMQ is open source and built for real-world developer needs. View on GitHub</p> <p>Author: Varun Gupta (gvarun01)</p>"},{"location":"api/","title":"API Reference","text":"<p>TaskMQ exposes a REST API for job management, monitoring, and health checks.</p>"},{"location":"api/#main-endpoints","title":"Main Endpoints","text":""},{"location":"api/#add-a-job","title":"Add a Job","text":"<ul> <li>POST <code>/add-job</code></li> <li>Auth: admin</li> <li>Body: <code>{ \"payload\": ..., \"handler\": ... }</code></li> <li>Returns: <code>{ \"status\": \"ok\", \"job_id\": ... }</code></li> </ul>"},{"location":"api/#cancel-a-job","title":"Cancel a Job","text":"<ul> <li>POST <code>/cancel</code></li> <li>Auth: admin</li> <li>Body: <code>{ \"job_id\": ... }</code></li> </ul>"},{"location":"api/#retry-a-job","title":"Retry a Job","text":"<ul> <li>POST <code>/retry</code></li> <li>Auth: admin, worker</li> <li>Body: <code>{ \"job_id\": ... }</code></li> </ul>"},{"location":"api/#metrics","title":"Metrics","text":"<ul> <li>GET <code>/monitor/metrics</code></li> <li>Prometheus metrics for jobs, failures, retries, durations</li> </ul>"},{"location":"api/#health","title":"Health","text":"<ul> <li>GET <code>/health</code></li> <li>Returns 200 if the API and DB are healthy</li> </ul>"},{"location":"api/#authentication","title":"Authentication","text":"<ul> <li>All endpoints require a JWT token in the <code>Authorization: Bearer ...</code> header.</li> <li>See <code>users.json</code> for example users and roles.</li> </ul>"},{"location":"api/#full-api-docs","title":"Full API Docs","text":"<ul> <li>Visit http://127.0.0.1:8000/docs when running the API for interactive OpenAPI docs. </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to TaskMQ!</p>"},{"location":"contributing/#setting-up-for-development","title":"Setting Up for Development","text":"<ol> <li>Clone the repo: <code>bash    git clone https://github.com/gvarun01/task-mq.git    cd task-mq</code></li> <li>Create a virtual environment: <code>bash    python -m venv .venv &amp;&amp; source .venv/bin/activate    pip install -e .[dev]</code></li> <li>Install test/dev dependencies: <code>bash    pip install pytest mkdocs mkdocs-material</code></li> </ol>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code>PYTHONPATH=. pytest -v\n</code></pre>"},{"location":"contributing/#building-docs","title":"Building Docs","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"contributing/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<ul> <li>Fork the repo and create a feature branch.</li> <li>Add tests for new features or bugfixes.</li> <li>Follow the existing code style (PEP8, docstrings).</li> <li>Open a pull request with a clear description.</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Use type hints and docstrings where possible.</li> <li>Keep handlers and CLI logic modular.</li> <li>Add comments for complex logic.</li> </ul> <p>We welcome all contributions, bug reports, and feature requests! </p>"},{"location":"handlers/","title":"Writing Handlers","text":"<p>TaskMQ lets you register custom Python functions as job handlers. This makes it easy to add your own business logic for any job type.</p>"},{"location":"handlers/#registering-a-handler","title":"Registering a Handler","text":"<p>In <code>taskmq/jobs/handlers.py</code>:</p> <pre><code>from taskmq.jobs.handlers import register_handler\n\n@register_handler(\"mytask\")\ndef my_handler(job):\n    print(f\"Processing job {job.id} with payload: {job.payload}\")\n</code></pre>"},{"location":"handlers/#using-a-handler","title":"Using a Handler","text":"<p>Add a job with your handler:</p> <pre><code>task-mq add-job --payload '{\"task\": \"do something\"}' --handler mytask\n</code></pre>"},{"location":"handlers/#handler-arguments","title":"Handler Arguments","text":"<ul> <li>The handler receives a <code>job</code> object with:</li> <li><code>job.id</code>: Job ID</li> <li><code>job.payload</code>: The payload (as a string or dict)</li> <li><code>job.status</code>, <code>job.retries</code>, etc.</li> </ul>"},{"location":"handlers/#example-dummy-handler","title":"Example: Dummy Handler","text":"<p>A simple handler is already registered for testing:</p> <pre><code>@register_handler(\"dummy\")\ndef dummy_handler(job):\n    print(f\"[DUMMY HANDLER] Executed for job {job.id} with payload: {job.payload}\")\n</code></pre>"},{"location":"handlers/#best-practices","title":"Best Practices","text":"<ul> <li>Keep handlers small and focused.</li> <li>Use the handler registry for modular, testable code.</li> <li>You can register as many handlers as you like! </li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#1-install","title":"1. Install","text":"<pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -e .\n</code></pre>"},{"location":"quickstart/#2-add-a-job","title":"2. Add a Job","text":"<pre><code>task-mq add-job --payload '{\"task\": \"hello world\"}' --handler dummy\n</code></pre>"},{"location":"quickstart/#3-run-a-worker","title":"3. Run a Worker","text":"<pre><code>task-mq run-worker --max-workers 1\n</code></pre>"},{"location":"quickstart/#4-serve-the-api","title":"4. Serve the API","text":"<pre><code>task-mq serve-api\n</code></pre> <p>Visit http://127.0.0.1:8000/docs for the interactive API docs.</p>"},{"location":"quickstart/#5-run-tests","title":"5. Run Tests","text":"<pre><code>PYTHONPATH=. pytest -v\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#cli-commands","title":"CLI Commands","text":"<ul> <li>Add a job: <code>bash   task-mq add-job --payload '{\"task\": \"do work\"}' --handler dummy</code></li> <li>Run workers: <code>bash   task-mq run-worker --max-workers 2</code></li> <li>Serve the API: <code>bash   task-mq serve-api</code></li> </ul>"},{"location":"usage/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Add a job: <code>POST /add-job</code> (admin only)</li> <li>Cancel a job: <code>POST /cancel</code> (admin only)</li> <li>Retry a job: <code>POST /retry</code> (admin/worker)</li> <li>Metrics: <code>GET /monitor/metrics</code></li> <li>Health: <code>GET /health</code></li> </ul> <p>See http://127.0.0.1:8000/docs for full OpenAPI docs.</p>"},{"location":"usage/#job-scheduling","title":"Job Scheduling","text":"<ul> <li>Jobs can be scheduled for the future or set as periodic (see API/handler docs for details).</li> <li>Retry policies: <code>fixed</code>, <code>exponential</code>, <code>none</code> (set per job).</li> </ul>"},{"location":"usage/#authentication","title":"Authentication","text":"<ul> <li>All API endpoints require a JWT token.</li> <li>Roles: <code>admin</code>, <code>worker</code> (see <code>users.json</code> for example users).</li> <li>Pass the token in the <code>Authorization: Bearer ...</code> header. </li> </ul>"}]}